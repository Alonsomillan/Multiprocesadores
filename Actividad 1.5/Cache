#include <stdio.h>
#include <omp.h>

static long num_pasos =  1000000000; // Definimos el número de pasos
double paso;

#define NUM_THREADS 200 // Definimos el número de threads

void main(){
	int i, nthreads;
	double pi, sum[NUM_THREADS], t1, t2, tiempo; // Definimos constantes
	paso = 1.0/num_pasos; // Definimos el paso que se va a evaluar
	omp_set_num_threads(NUM_THREADS);
	const double startTime = omp_get_wtime();
	t1 = omp_get_wtime();
	#pragma omp parallel
	{
	int i, id, nthrds; 
	double x;
		id = omp_get_thread_num(); // Se captura la etiqueta del hilo que entra
		nthrds = omp_get_num_threads();
		if (id==0) nthreads = nthrds;
		for (i = id, sum[id]=0.0; i<num_pasos; i=i+nthrds){
				x =  (i+0.5)*paso; // Definimos el punto que se evalua
				sum [id]+=4.0/(1.0+x*x);
		}
	}

	for (i=0, pi=0.0; i<nthreads; i++){
			pi+=sum[i]*paso;
	}

	t2=omp_get_wtime();
	const double endTime = omp_get_wtime();
	tiempo = t2-t1; // Calculamos e imprimimos los resultados y tiempo
	printf("pi=(%lf)\n",pi);
	printf("tomo (%lf) segundos\n",(endTime-startTime));
}
